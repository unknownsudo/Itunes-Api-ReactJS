{"version":3,"sources":["Search.js","App.js","reportWebVitals.js","index.js"],"names":["Searchbar","props","useState","searchKeyword","setValue","className","value","onChange","event","target","onClick","searchh","App","searchWord","setSearchWord","Artist","setArtist","view","setView","useEffect","fetch","then","response","json","data","console","log","mapi","results","map","track","artistName","trackName","collectionName","link","collectionViewUrl","temp","href","Search","word","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAaeA,MAXf,SAAmBC,GACf,MAAkCC,mBAAS,UAA3C,mBAAOC,EAAP,KAAsBC,EAAtB,KAEA,OACI,sBAAKC,UAAU,kBAAf,UACI,uBAAOA,UAAU,aAAaC,MAAOH,EAAeI,SAAU,SAACC,GAAYJ,EAASI,EAAMC,OAAOH,UACjG,wBAAQD,UAAU,aAAaK,QAJjB,WAAQT,EAAMU,QAAQR,IAIpC,wBC2CGS,MA9Cf,WAEE,MAAoCV,mBAAS,UAA7C,mBAAOW,EAAP,KAAmBC,EAAnB,KACA,EAA4BZ,mBAAS,MAArC,mBAAOa,EAAP,KAAeC,EAAf,KACA,EAAwBd,mBAAU,oDAAlC,mBAAOe,EAAP,KAAaC,EAAb,KAkCA,OAhCAC,qBAAU,WACRC,MAAM,wCAAD,OAAyCP,IAC3CQ,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,IAAMG,EAAOH,EAAKI,QAAQC,KAAI,SAAAC,GAC5B,MAAO,CACLC,WAAYD,EAAMC,WAClBC,UAAWF,EAAME,UACjBC,eAAgBH,EAAMG,eACtBC,KAAMJ,EAAMK,sBAGhBnB,EAAUW,QAGb,CAACd,IAEJM,qBAAU,WACR,GAAMJ,EAAQ,CACZ,IAAMqB,EAAOrB,EAAOc,KAAI,SAAAC,GAAK,OAC3B,+BACE,oBAAIzB,UAAU,cAAd,SAA6ByB,EAAMC,aACnC,oBAAI1B,UAAU,aAAd,SAA4ByB,EAAME,YAClC,oBAAI3B,UAAU,aAAd,SAA4ByB,EAAMG,iBAClC,oBAAGI,KAAM,OAAQ5B,OAAO,SAAxB,cAAkC,oBAAIJ,UAAU,QAAd,kBAAlC,aAGJa,EAAQkB,MAET,CAACrB,IAGF,gCACE,cAACuB,EAAD,CAAW3B,QAAS,SAAC4B,GAAWzB,EAAcyB,MAC7CtB,MClCQuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.1c480735.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Searchbar(props) {\r\n    const [searchKeyword, setValue] = useState(\"eminem\")\r\n    const searchHandler = () => { props.searchh(searchKeyword) };\r\n    return (\r\n        <div className=\"search-bar-cont\">\r\n            <input className=\"search-bar\" value={searchKeyword} onChange={(event) => { setValue(event.target.value) }} />\r\n            <button className=\"submit-but\" onClick={searchHandler}>Search</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbar;","\r\nimport React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport SearchBar from './Search';\r\n\r\nfunction App() {\r\n\r\n  const [searchWord, setSearchWord] = useState('eminem');\r\n  const [Artist, setArtist] = useState(null);\r\n  const [view, setView] = useState((<div>no data received</div>));\r\n\r\n  useEffect(() => {\r\n    fetch(`https://itunes.apple.com/search?term=${searchWord}`)\r\n      .then((response) => response.json())\r\n      .then(data => {\r\n        console.log(data)\r\n        const mapi = data.results.map(track => {\r\n          return {\r\n            artistName: track.artistName,\r\n            trackName: track.trackName,\r\n            collectionName: track.collectionName,\r\n            link: track.collectionViewUrl\r\n          }\r\n        });\r\n        setArtist(mapi);\r\n      });\r\n\r\n  }, [searchWord]);\r\n\r\n  useEffect(() => {\r\n    if (!!Artist) {\r\n      const temp = Artist.map(track => (\r\n        <ul>\r\n          <li className=\"artist-name\">{track.artistName}</li>\r\n          <li className=\"music-name\">{track.trackName}</li>\r\n          <li className=\"album-name\">{track.collectionName}</li>\r\n          <a href={\"link\"} target=\"_blank\"> <li className=\"linki\">Link</li> </a>\r\n        </ul>\r\n      ));\r\n      setView(temp);\r\n    }\r\n  }, [Artist])\r\n\r\n  return (\r\n    <div>\r\n      <SearchBar searchh={(word) => { setSearchWord(word) }} />\r\n      {view}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}